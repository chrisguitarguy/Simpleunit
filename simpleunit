#!/usr/bin/env php
<?php
/**
 * Simpleunit -- The Simplest PHP Unit Test Framework
 *
 * Copyright (c) 2014 Christopher Davis
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * @package     simpleunit
 * @author      Christopher Davis <http://christopherdavis.me>
 * @license     http://opensource.org/licenses/MIT MIT
 */

if (false !== $bootstrap = getenv('TESTS_BOOTSTRAP')) {
    require $bootstrap;
}

// exception for assertion errors
class AssertionFailedException extends \Exception { }

// disable warnings on `assert` failures
assert_options(ASSERT_WARNING, 0);

// register a callback, this will just throw the exception above so we know
// when a deliberate assertion failed.
assert_options(ASSERT_CALLBACK, function ($file, $line, $expr, $message=null) {
    throw new AssertionFailedException(sprintf(
        'Assertion Failed: %s in %s:%d',
        $message ?: 'Unknown',
        $file,
        $line
    ));
});

// warnings are errors too
set_error_handler(function ($errno, $errstr, $file, $line) {
    throw new \ErrorException($errstr, 0, $errno, $file, $line);
});

// find all the files!
$testDir = getenv('TESTS_DIR');
try {
    $files = new \RecursiveIteratorIterator(
        new \RecursiveDirectoryIterator(
            false !== $testDir ? $testDir : getcwd().'/tests'
        ),
        \RecursiveIteratorIterator::LEAVES_ONLY
    );
} catch (\Exception $e) {
    echo $testDir, ' is not a valid directory', PHP_EOL;
    exit(1);
}

$hasErrors = false;
foreach ($files as $file) {
    // $file instanceof SplFileInfo

    // look for all files ending in _test.php
    if ($file->getBasename('_test.php') == $file->getBasename()) {
        continue;
    }

    $e = null; // make sure exception isn't set from earlier
    echo '* ', ucwords(str_replace('_', ' ', $file->getBasename('_test.php'))), ': ';
    try {
        require $file->getRealPath();
    } catch (AssertionFailedException $e) {
        echo 'Failed', PHP_EOL;
        echo "\t", $e->getMessage();
    } catch (\ErrorException $e) {
        echo 'Error', PHP_EOL;
        printf(
            "\tPHP notice, warning, or error generated in %s:%d -- %s",
            $e->getFile(),
            $e->getLine(),
            $e->getMessage()
        );
    } catch (\Exception $e) {
        echo 'Uncaught Exception', PHP_EOL;
        printf(
            "\tUnexpected %s exception in %s:%d -- %s",
            get_class($e),
            $e->getFile(),
            $e->getLine(),
            $e->getMessage()
        );

        $trace = $e->getTrace();
        array_pop($trace); // last item is the `require $file->getRealPath()` statement
        foreach ($trace as $line) {
            printf("\t\t%s:%d", $trace['file'], $trace['line']);
        }
    }

    // faking a try/except/else... almost
    if (null === $e) {
        echo 'Passed';
    } else {
        $hasErrors = true;
    }

    echo PHP_EOL;
}

exit($hasErrors ? 1 : 0);
